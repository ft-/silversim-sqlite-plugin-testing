<?xml version="1.0"?>
<project name="project setup" default="setup">
	<target name="setup">
		<call target="setup-workspace" unless="${directory::exists('bin')}"/>
		<call target="additional-bin"/>
		<call target="packages"/>
		<call target="nuget-updates" unless="${file::exists('bin/.nuget-done')}"/>
		<call target="exe.config"/>
		<call target="prebuild"/>
	</target>
	
	<target name="setup-workspace" description="Generates sym linked binaries storage">
		<mkdir dir="../bin"/>
		<exec program="windows/junction.exe" if="${platform::is-windows()}">
			<arg path="bin"/>
			<arg path="../bin"/>
		</exec>
		<exec program="ln" unless="${platform::is-windows()}">
			<arg value="-sf"/>
			<arg path="../bin"/>
			<arg path="bin"/>
		</exec>
	</target>
	
	<target name="additional-bin" description="Copy local binaries">
		<copy todir="bin" if="${directory::exists('additional-bin')}" overwrite="true">
			<fileset basedir="additional-bin">
				<include name="**/*.dll"/>
				<include name="**/*.so"/>
				<include name="**/*.dylib"/>
				<include name="**/*.config"/>
			</fileset>
		</copy>
	</target>
	
	<target name="packages" description="Copy package definitions">
		<copy todir="bin/installed-packages" if="${directory::exists('packages')}" overwrite="true">
			<fileset basedir="packages">
				<include name="**/*.spkg"/>
			</fileset>
		</copy>
	</target>
	
	<target name="nuget-updates" description="Updates packages from nuget">
		<setenv name="PATH" path="${environment::get-variable('PATH')}:${project::get-base-directory()}/nuget" if="${platform::is-windows()}"/>
	
		<property name="silversim-nuget.packages" value="C5,log4net"/>
		<property name="silversim.packages" value="${silversim-nuget.packages},Nini"/>
		
		<property name="silversim.package.C5.path" value="net45"/>
		<property name="silversim.package.log4net.path" value="net45-full"/>
		<property name="silversim-nuget.log4net.version" value="2.0.5"/>
		<property name="silversim.package.Nini.path" value="net40"/>
		
		<foreach item="String" in="${silversim-nuget.packages}" delim="," property="package">
			<property name="package-version" value="" overwrite="true"/>
			<delete dir="libraries/${package}"/>
			<if test="${property::exists('silversim-nuget.'+package+'.version')}">
				<property name="package-version" value="${property::get-value('silversim-nuget.'+package+'.version')}" overwrite="true"/>
			</if>
			<exec program="mono" unless="${platform::is-windows()}">
				<arg value="nuget/nuget.exe"/>
				<arg value="install"/>
				<arg value="${package}"/>
				<arg value="-o"/>
				<arg path="libraries"/>
				<arg value="-ExcludeVersion"/>
				<arg value="-Version" if="${property::exists('silversim-nuget.'+package+'.version')}"/>
				<arg value="${package-version}" if="${property::exists('silversim-nuget.'+package+'.version')}"/>
			</exec>
			<exec program="nuget" if="${platform::is-windows()}">
				<arg value="install"/>
				<arg value="${package}"/>
				<arg value="-o"/>
				<arg path="libraries"/>
				<arg value="-ExcludeVersion"/>
				<arg value="-Version" if="${property::exists('silversim-nuget.'+package+'.version')}"/>
				<arg value="${package-version}" if="${property::exists('silversim-nuget.'+package+'.version')}"/>
			</exec>
		</foreach>

		<foreach item="String" in="${silversim.packages}" delim="," property="package">
			<echo message="Copying ${package} into bin"/>
			<copy todir="bin">
				<fileset basedir="libraries/${package}/lib/${property::get-value('silversim.package.'+package+'.path')}">
					<include name="*.dll"/>
				</fileset>
			</copy>
		</foreach>
		<echo message="nuget-updates processed" file="bin/.nuget-done"/>
	</target>
	
	<target name="exe.config" description="Installs exe.config files">
		<copy todir="bin" if="${directory::exists('exe.config')}">
			<fileset basedir="exe.config">
				<include name="**/*.config"/>
			</fileset>
		</copy>
	</target>
	
	<target name="prebuild" description="Runs prebuild.exe">
		<foreach item="Folder" in="SilverSim" property="modulefolder">
			<delete dir="${modulefolder}/obj" failonerror="false"/>
		</foreach>
		<if test="${platform::is-windows()}">
			<exec program="Prebuild/Prebuild.exe">
				<arg value="/target"/>
				<arg value="vs2015"/>
			</exec>
		</if>
		<if test="${not platform::is-windows()}">
			<exec program="mono">
				<arg path="Prebuild/Prebuild.exe"/>
				<arg value="/target"/>
				<arg value="vs2015"/>
			</exec>
		</if>
	</target>
	
	<target name="sonar-project" description="Creates sonar-project">
		<property name="version" value="alpha" overwrite="false"/>
		<property name="versionextra" value="" overwrite="false"/>
		<property name="sonar.modules" value=""/>
		<property name="sonar.moduledeclarations" value=""/>
		<foreach item="Folder" in="SilverSim" property="modulefolder">
			<property name="module" value="SilverSim/${path::get-file-name(modulefolder)}"/>
			<property name="modulenamespace" value="${string::replace(module, '/', '.')}"/>
			<property name="moduleid" value="${module}"/>
			<echo message="Sonar.module ${moduleid}"/>
			<property name="sonar.modules" value="${sonar.modules}," if="${property::get-value('sonar.modules')!=''}" overwrite="true"/>
			<property name="sonar.modules" value="${sonar.modules}${moduleid}" overwrite="true"/>
			<property name="sonar.moduledeclarations" value="${sonar.moduledeclarations}
${moduleid}.sonar.projectName=${modulenamespace}
${moduleid}.sonar.projectKey=${modulenamespace}
${moduleid}.sonar.sources=.
" overwrite="true"/>
		</foreach>

		<echo file="sonar-project.properties" message="
sonar.projectKey=SilverSim
sonar.projectName=SilverSim
sonar.projectVersion=${version}${versionextra}
sonar.sourceEncoding=UTF-8
sonar.modules=${sonar.modules}
${sonar.moduledeclarations}
"/>
	</target>
	
	<target name="build" description="Runs msbuild/xbuild">
		<call target="setup"/>
		<call target="nls"/>
		<if test="${platform::is-windows()}">
			<readregistry property="msbuildpath" key="SOFTWARE\Microsoft\MSBuild\ToolsVersions\14.0\MSBuildToolsPath" hive="LocalMachine"/>
			<echo message="Found msbuild at ${msbuildpath}"/>
			<exec program="msbuild.exe" basedir="${msbuildpath}" workingdir=".">
				<arg value="/p:Configuration=Debug" if="${property::exists('debug-build')}"/>
				<arg value="/p:Configuration=DebugRel" if="${property::exists('debugrel-build')}"/>
				<arg value="/p:Configuration=Release" if="${property::exists('release-build')}"/>
				<arg value="/p:Platform=&quot;Any CPU&quot;"/>
			</exec>
		</if>
		<if test="${platform::is-unix()}">
			<exec program="xbuild" workingdir=".">
				<arg value="/p:Configuration=Debug" if="${property::exists('debug-build')}"/>
				<arg value="/p:Configuration=DebugRel" if="${property::exists('debugrel-build')}"/>
				<arg value="/p:Configuration=Release" if="${property::exists('release-build')}"/>
			</exec>
		</if>
	</target>
	
	<target name="nls" description="Process language files">
		<mkdir dir="bin/languages"/>
		<foreach item="Folder" property="longfoldername">
			<in>
				<items basedir="nls">
					<include name="*.src"/>
				</items>
			</in>
			<do>
				<property name="foldername" value="${path::get-file-name-without-extension(longfoldername)}"/>
				<echo message="Processing language data for ${foldername}"/>
				<mkdir dir="bin/languages/${foldername}" failonerror="false"/>
				<foreach item="File" property="longfilename" in="nls/${foldername}.src">
					<property name="filename" value="${path::get-file-name-without-extension(longfilename)}"/>
					<exec program="resgen">
						<arg path="nls/${foldername}.src/${filename}.txt"/>
						<arg path="bin/languages/${foldername}/${filename}.resources"/>
					</exec>
				</foreach>
			</do>
		</foreach>
	</target>
</project>
